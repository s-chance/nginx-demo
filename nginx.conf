# http 请求处理
http {

	# 处理 html 以外的 css 文件或其它格式文件等
	# types {
	# 	text/css	css;
	# 	text/html	html;
	# }

	# 实际上 nginx 默认提供了 mime.types 文件，默认包含了大量的格式支持
	include mime.types;

	# 负载均衡，先构建启动好 docker 容器 build.sh 和 run.sh
	upstream backendserver {
		server 127.0.0.1:1111;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
	}

	# 具体服务处理
	server {
		# 监听8081端口
		listen 8081;
		# 指定根目录，默认会自动寻找该目录下的 index.html 文件
		root /nginx-demo/site;

		# 访问站点根目录下的 fruits 目录
		location /fruits {
			# location 指定的内容会拼接到 root 值的后面
			# 这里实际访问的是/nginx-demo/site/fruits
			root /nginx-demo/site;
		}

		# 通过 alias 的方式访问 fruits 目录
		location /soldout {
			# 这里会替换为访问以下路径
			alias /nginx-demo/site/fruits;
		}

		# 访问站点根目录下的 vegetables 目录，但是没有 index.html 文件
		location /vegetables {
			root /nginx-demo/site;
			# 手动指定文件，如果找不到，则默认访问根目录下的 index.html
			# 如果这些文件都找不到，则返回404
			try_files /vegetables/veggies.html /index.html =404;
		}

		# 正则表达式匹配，~* 表示不区分大小写，[0-9] 表示匹配 0-9 中的任一个数
		location ~* /count/[0-9] {
			root /nginx-demo/site;
			try_files /index.html =404;
		}

		# 重定向
		location /crops {
			# 重定向到 fruits 目录
			return 307 /fruits;
		}

		# 重写，相比重定向，重写不会在访问后改变 url
		rewrite ^/number/(\w+) /count/$1;

		# 指定默认处理行为：进行负载均衡处理
		location / {
			proxy_pass http://backendserver/;
		}
	}
}


# 处理连接的设置
events {}